sudo apt-get install screen
screen

tl-a Ctl-c, create a new window

Ctl-a Ctl-a, switch between windows

Ctl-a n, toggle to next window

Ctl-a p, toggle to previous window

Ctl-a 5, toggle to 5th window

Ctl-a ", get a menu listing all of the window

Ctl-a A, tool for adding a name to your window, helpful for the menu view

Ctl-a k, Kills the window

Ctl-a d, Detach from the session

screen -r re-attache

killall screen // to kill all screens

screen -dmS screen1 python /home/pi/alok/servo/servo01.py // create a screen in background-> run the command -> detach from the screen

sudo nano .bashrc // this is for every terminal start

Options:
-4            Resolve hostnames only to IPv4 addresses.
-6            Resolve hostnames only to IPv6 addresses.
-a            Force all capabilities into each window's termcap.
-A -[r|R]     Adapt all windows to the new display width & height.
-c file       Read configuration file instead of '.screenrc'.
-d (-r)       Detach the elsewhere running screen (and reattach here).
-dmS name     Start as daemon: Screen session in detached mode.
-D (-r)       Detach and logout remote (and reattach here).
-D -RR        Do whatever is needed to get a screen session.
-e xy         Change command characters.
-f            Flow control on, -fn = off, -fa = auto.
-h lines      Set the size of the scrollback history buffer.
-i            Interrupt output sooner when flow control is on.
-l            Login mode on (update /var/run/utmp), -ln = off.
-ls [match]   or
-list         Do nothing, just list our SockDir [on possible matches].
-L [file]     Turn on output logging. Set logfile name.
-m            ignore $STY variable, do create a new screen session.
-O            Choose optimal output rather than exact vt100 emulation.
-p window     Preselect the named window if it exists.
-q            Quiet startup. Exits with non-zero return code if unsuccessful.
-Q            Commands will send the response to the stdout of the querying process.
-r [session]  Reattach to a detached screen process.
-R            Reattach if possible, otherwise start a new session.
-s shell      Shell to execute rather than $SHELL.
-S sockname   Name this session <pid>.sockname instead of <pid>.<tty>.<host>.
-t title      Set title. (window's name).
-T term       Use term as $TERM for windows, rather than "screen".
-U            Tell screen to use UTF-8 encoding.
-v            Print "Screen version 4.05.00 (GNU) 10-Dec-16".
-wipe [match] Do nothing, just clean up SockDir [on possible matches].
-x            Attach to a not detached screen. (Multi display mode).
-X            Execute <cmd> as a screen command in the specified session.

nano /etc/init.d/startMyApp.sh
screen -dmS screen1
screen -r screen1
python ~/hello.py
screen -d

sudo update-rc.d startMyApp.sh defaults
onesc@osc-dev-debian:~$ sudo update-rc.d startMyApp.sh defaults
insserv: warning: script 'startMyApp.sh' missing LSB tags and overrides

If look at the /etc/init.d/skeleton script, in the beginning of it there are two marks : ### BEGIN INIT INFO and ### END INIT INFO.

All the data inside those marks is the configuration for runtime dependences and you can look them up in the Debian Wiki.

Your script is missing these tags and configuration so insserv just uses some defaults.

This is just a warning and is not something to worry about, but you can fix it very easily and then you can be Linux Standards Base-compliant (That's what LSB means).

The easiest way to fix the warning, is to copy the LSB tags from the skeleton script to the beginning of your mathkernel script and just change skeleton to mathkernel.

chmod +x /etc/init.d/startMyApp.sh

ln -s /etc/init.d/startMyApp.sh /etc/rc.d/



-----------------------------in raspberryPi -------------------------------

sudo nano /etc/profile
	// at last
	sudo python /home/pi/test.py
    sudo reboot
